// <auto-generated />
using System;
using Infraestructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.Property<Guid>("CarritoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.HasKey("CarritoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Carrito", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CarritoProducto", b =>
                {
                    b.Property<Guid>("CarritoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.HasKey("CarritoId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("CarritoProducto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("DNI");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            Apellido = "carrizo",
                            Direccion = "calle siempreviva 599",
                            Dni = "696969696",
                            Nombre = "mateo",
                            Telefono = "1513616310"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Orden", b =>
                {
                    b.Property<Guid>("OrdenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarritoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("OrdenId");

                    b.HasIndex("CarritoId")
                        .IsUnique();

                    b.ToTable("Orden", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("ProductoId");

                    b.ToTable("Producto", (string)null);

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            Codigo = "12956",
                            Descripcion = "Lata de tomate de 600g",
                            Image = "https://i.imgur.com/gqJVlWk.jpg",
                            Marca = "Marolio",
                            Nombre = "Lata de Tomate",
                            Precio = 30m
                        },
                        new
                        {
                            ProductoId = 2,
                            Codigo = "77734",
                            Descripcion = "lata de Arvejas de 600g",
                            Image = "https://i.imgur.com/AARTUJY.jpg",
                            Marca = "marolio",
                            Nombre = "Lata de Arvejas",
                            Precio = 90m
                        },
                        new
                        {
                            ProductoId = 3,
                            Codigo = "67413",
                            Descripcion = "Fideos",
                            Image = "https://i.imgur.com/HNZyMIF.jpg",
                            Marca = "Marolio",
                            Nombre = "Fideos Tirabuzon",
                            Precio = 70m
                        },
                        new
                        {
                            ProductoId = 4,
                            Codigo = "12956",
                            Descripcion = "500c",
                            Image = "https://i.imgur.com/lUrXZUw.jpg",
                            Marca = "Brahma",
                            Nombre = "Cerveza  Lata ",
                            Precio = 148m
                        },
                        new
                        {
                            ProductoId = 5,
                            Codigo = "01756",
                            Descripcion = "botella de agua con gas 500ccc",
                            Image = "https://i.imgur.com/CfHIPke.jpg",
                            Marca = "Villavicencio",
                            Nombre = "botellla de agua con gas 500cc ",
                            Precio = 30m
                        },
                        new
                        {
                            ProductoId = 6,
                            Codigo = "00056",
                            Descripcion = "estuche de 4 unidades",
                            Image = "https://i.imgur.com/doMqjA2.jpg",
                            Marca = "Champion",
                            Nombre = "Hamburgesa",
                            Precio = 290m
                        },
                        new
                        {
                            ProductoId = 7,
                            Codigo = "00001",
                            Descripcion = "arroz '0000' 500gr",
                            Image = "https://i.imgur.com/k5enq60.jpg",
                            Marca = "El Dique",
                            Nombre = "arroz",
                            Precio = 103m
                        },
                        new
                        {
                            ProductoId = 8,
                            Codigo = "00050",
                            Descripcion = "Aceite mezcla 900cc",
                            Image = "https://i.imgur.com/YZJQGpC.jpg",
                            Marca = "Marolio",
                            Nombre = "Aceite",
                            Precio = 257m
                        },
                        new
                        {
                            ProductoId = 9,
                            Codigo = "03561",
                            Descripcion = "cacao en polvo 180gr",
                            Image = "https://i.imgur.com/eAFHPvX.jpg",
                            Marca = "Marolio",
                            Nombre = "Cacao en polvo",
                            Precio = 106m
                        },
                        new
                        {
                            ProductoId = 10,
                            Codigo = "09993",
                            Descripcion = "queso rallado 100Gr",
                            Image = "https://i.imgur.com/jaFvFal.jpg",
                            Marca = "Gikar",
                            Nombre = "Queso Rallado",
                            Precio = 50m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.HasOne("Domain.Entities.Cliente", "Cliente")
                        .WithMany("Carritos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.Entities.CarritoProducto", b =>
                {
                    b.HasOne("Domain.Entities.Carrito", "Carrito")
                        .WithMany("CarritoProductos")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Producto", "Producto")
                        .WithMany("CarritoProductos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Entities.Orden", b =>
                {
                    b.HasOne("Domain.Entities.Carrito", "Carrito")
                        .WithOne("Orden")
                        .HasForeignKey("Domain.Entities.Orden", "CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");
                });

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.Navigation("CarritoProductos");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Carritos");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Navigation("CarritoProductos");
                });
#pragma warning restore 612, 618
        }
    }
}
